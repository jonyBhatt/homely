// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

type Address {
    street String
    city   String
    state  String
    zip    String
}

enum UserRole {
    Admin
    Landlord
    User
}

model User {
    id            String     @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    password      String?
    accounts      Account[]
    sessions      Session[]
    role          UserRole   @default(User)
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
    property      Property[]

    @@map("users")
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("sessions")
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_token")
}

model Property {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    title       String
    description String
    price       String
    category    String
    rooms       String
    bedrooms    String
    bathrooms   String
    garage      String
    size        String
    address     String
    city        String
    image       String? // Optional field
    state       String? // Optional field
    country     String? // Optional field

    userId String? @db.ObjectId
    user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("property")
}
